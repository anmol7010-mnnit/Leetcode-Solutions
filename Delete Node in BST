/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* minVal(TreeNode* root) {
        
        if (root == NULL)
            return NULL;

        TreeNode* temp = root;
        while (temp -> left != NULL) {
            temp = temp -> left;
        }
        
        return temp;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == NULL) {
            return NULL;
        }

        if (root -> val == key) {
            if (root -> left == NULL && root -> right == NULL) {
                return NULL;
            }
            else if (root -> left != NULL && root -> right == NULL) {
                TreeNode* temp = root -> left;
                return temp;
            }
            else if (root -> left == NULL && root -> right != NULL) {
                TreeNode* temp = root -> right;
                return temp;
            }
            else {
                int mini = minVal(root -> right) -> val;
                root -> val = mini;
                root -> right = deleteNode(root -> right, mini);
                return root;
            }
        }
        else if (root -> val < key) {
            root -> right = deleteNode(root -> right, key);
        }
        else if (root -> val > key) {
            root -> left = deleteNode(root -> left, key);
        } 

        return root;
    }
};
