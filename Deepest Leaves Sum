/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int level(TreeNode* root) {
        queue <pair<TreeNode*,int>> q;
        q.push({root, 0});

        int maxlvl = INT_MIN;

        int sum = 0;

        while (!q.empty()) {
            TreeNode* node = q.front().first;
            int lvl = q.front().second;
            q.pop();

            if (lvl > maxlvl) {
                maxlvl = lvl;
            }

            if (node -> left) {
                q.push({node -> left, lvl+1});
            }

            if (node -> right) {
                q.push({node -> right, lvl+1});
            } 
        }
        return maxlvl;
    }

    int deepestLeavesSum(TreeNode* root) {
        int l = level(root);

        queue <pair<TreeNode*,int>> q;
        q.push({root, 0});

        int sum = 0;

        while (!q.empty()) {

            TreeNode* node = q.front().first;
            int lvl = q.front().second;
            q.pop();

            if (lvl == l) {
                sum += node->val;
            }

            if (node -> left) {
                q.push({node -> left, lvl+1});
            }

            if (node -> right) {
                q.push({node -> right, lvl+1});
            } 
        }
        return sum;
    }
};
