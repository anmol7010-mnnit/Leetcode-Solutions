class Solution {
public:
    
    bool isvalid(string subStr, int k) {
        
        int cnt = 0;
        
        for (int i = 0; i < subStr.size(); i++) {
            if (subStr[i] == '1') {
                cnt++;
            }
        }
        
        if (cnt == k) {
            return 1;
        }
        return 0;
     } 
    
    void printSubstrings(string str, vector<string>& v, int k) {
        
        for (int i = 0; i < str.length(); i++) {
            string subStr;
            for (int j = i; j < str.length(); j++) {
                subStr += str[j];
                if (isvalid(subStr,k)) {
                    v.push_back(subStr);
                }
        }
    }
}
    string shortestBeautifulSubstring(string s, int k) {
        
        vector <string> v;
        printSubstrings(s,v,k);
        
        string ans = "";
        
        sort(v.begin(),v.end());
        
        int len = INT_MAX;
        
        for (int i = 0; i < v.size(); i++) {
            if (v[i].length() < len) {
                len = v[i].length();
                ans = v[i];
            } 
        }
        
        return ans;
    }
};
