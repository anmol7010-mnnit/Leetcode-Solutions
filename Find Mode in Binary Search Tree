/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector <int>&ans) {
        if (root == NULL) {
            return;
        }
        inorder(root -> left, ans);
        ans.push_back(root -> val);
        inorder(root -> right, ans);
    }
    vector<int> findMode(TreeNode* root) {
        vector <int> ans;
        inorder(root,ans);

        unordered_set <int> v;
        unordered_map <int,int> mp;
        int maxi = INT_MIN;

        for (int i = 0; i < ans.size(); i++) {
            mp[ans[i]]++;
            if (mp[ans[i]] > maxi) {
                maxi = mp[ans[i]];
            }
        }

        for (int i = 0; i < ans.size(); i++) {
            if (mp[ans[i]] == maxi) {
                v.insert(ans[i]);
            }
        }
        vector <int> res;

        for (auto i:v) {
            res.push_back(i);
        }

        return res;
    }
};
