class cmp {
    public:
    bool operator()(pair <int,string> a, pair <int,string> b) const {
        if (a.first == b.first) {
            return a.second > b.second;
        }
        else {
            return a.first < b.first;
        }
    }
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        
        unordered_map <string,int> mp;

        for (int i = 0; i < words.size(); i++) {
            mp[words[i]]++;
        }

        priority_queue <pair <int,string>, vector<pair <int,string>>, cmp> pq;

        for (auto i:mp) {
            pq.push({i.second, i.first});
        }   

        vector <string> ans;

        while (k--) {
            ans.push_back(pq.top().second);
            pq.pop();
        }

        return ans;

    }
};
