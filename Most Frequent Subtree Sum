/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum(TreeNode* root, vector <int>& ans) {
        if (root == NULL) {
            return 0;
        }

        int left = sum(root -> left,ans);
        int right = sum(root -> right,ans);

        ans.push_back(left+right+root->val);

        return left+right+root->val;
    }

    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector <int> ans;
        sum(root,ans);

        int maxi = INT_MIN;

        unordered_map<int,int> mp;

        vector <int> res;

        for (auto i:ans) {
            mp[i]++;
        }

        for (auto i:mp) {
            if (i.second > maxi) {
                maxi = i.second;
            }
        }

        for (auto i:mp) {
            if (i.second == maxi) {
                res.push_back(i.first);
            }
        }

        return res;
    }
};
