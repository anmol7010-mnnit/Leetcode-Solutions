/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void createmap(vector <int> inorder, map <int,int> &nodetoind) {
        for (int i = 0; i < inorder.size(); i++) {
            nodetoind[inorder[i]] = i;
        }
    }

    TreeNode* solve(vector<int> inorder, vector<int> postorder, map<int,int>& nodetoind, int &index, int instart, int inend, int n) {

        if (index < 0 || instart > inend) {
            return NULL;
        }

        int element = postorder[index--];
        TreeNode* root = new TreeNode(element);
        int pos = nodetoind[element];

        root -> right = solve(inorder,postorder,nodetoind,index,pos+1,inend,n);
        root -> left = solve(inorder,postorder,nodetoind,index,instart,pos-1,n);

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

        map <int,int> nodetoind;
        int n = postorder.size();
        createmap(inorder,nodetoind);
        int index = n-1;

        TreeNode* ans = solve(inorder,postorder,nodetoind,index,0,n-1,n);

        return  ans;
    }
};
