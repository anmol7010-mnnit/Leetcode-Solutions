/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void CreateMapping(map<int,int>& NodeToInd, vector <int> inorder) {
        for (int i = 0; i < inorder.size(); i++) {
            NodeToInd[inorder[i]] = i;
        }
    }

    TreeNode* solve(vector<int> preorder, vector<int> inorder, int &preindex, int instart, int inend, int n, map<int,int> &NodeToInd) {

        if (preindex >= n || instart > inend) {
            return NULL;
        }

        int element = preorder[preindex++];
        TreeNode* root = new TreeNode(element);
        int pos = NodeToInd[element];

        root -> left = solve(preorder,inorder,preindex,instart,pos-1,n,NodeToInd);
        root -> right = solve(preorder,inorder,preindex,pos+1,inend,n,NodeToInd);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = inorder.size();
        int preindex = 0;

        map<int,int>NodeToInd;

        CreateMapping(NodeToInd,inorder);

        TreeNode* ans = solve(preorder,inorder,preindex,0,n-1,n,NodeToInd);
        return ans;
    }
};
